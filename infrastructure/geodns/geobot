#!/usr/bin/perl

# Copyright (C) 2015-2017 Christoph Berg <myon@oftc.net>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

use strict;
use warnings;
use Net::DNS;
use POE qw(Component::IRC::State);
use YAML::Syck;

my $conffile = $ARGV[0] || die "Syntax: $0 config.yaml";
my $conf = {}; # yaml config file
my $resolver;

my $network = {}; # what we know about the current network state
my $areas = {}; # list of servers per area
my $dnsarea = {}; # list of rotate: yes servers per area
my $ptr = {}; # reverse names: ip -> server
my $have_map = 0; # do we have a current network map?
my $ping_stamp = time;

# business logic

sub logger
{
    my $msg = "@_\n";
    $msg =~ s///g;
    $msg =~ s/(\d+)?//g;
    #print scalar gmtime . " $msg";
    print STDERR $msg;
}

sub load_conf ()
{
    logger "Loading config file $conffile";
    $conf = LoadFile($conffile) or die "$conffile: $!";
    $conf->{channel} or die "$conffile: channel not set";

    logger "Loading servers file $conf->{servers}";
    $areas = {};
    $dnsarea = {};
    $ptr = {};
    my $servers = LoadFile($conf->{servers}) or die "$conf->{servers}: $!";
    foreach my $server (@{$servers->{servers}}) {
	my $name = $server->{name} or die "server has no name!";
	$name .= '.' . $conf->{dns}->{serverdomain};
	my $area = $server->{area} or die "$name has no area";
	$network->{$name}->{area} = $area;
	$areas->{$area} //= [];
	push @{$areas->{$area}}, $name;
	push @{$areas->{default}}, $name; # put all servers also into default area
	$network->{$name}->{hub} = to_bool($server->{hub}, 0);
	$network->{$name}->{rotate} =
	    to_bool($server->{rotate}, !$network->{$name}->{hub});
	$dnsarea->{$area} //= [];
	if ($network->{$name}->{rotate}) { # should this server be in rotation?
	    push @{$dnsarea->{$area}}, $name;
	    push @{$dnsarea->{default}}, $name; # put all servers also into default area
	}
	$network->{$name}->{is_rotated} = {}; # is this server actually in rotation?
	if ($server->{ip}) {
	    $network->{$name}->{A} = $server->{ip};
	    $ptr->{$server->{ip}} = $name;
	} else {
	    delete $network->{$name}->{A};
	}
	if ($server->{ip6}) {
	    $network->{$name}->{AAAA} = $server->{ip6};
	    $ptr->{$server->{ip6}} = $name;
	} else {
	    delete $network->{$name}->{AAAA};
	}
	$network->{$name}->{clients} ||= 0;
    }
}

# derotate IPs that do not belong to any server
# re-rotate all rotated servers to sync A vs AAAA per RR and across RRs
sub dns_fixup ()
{
    $resolver = Net::DNS::Resolver->new (nameservers => [$conf->{dns}->{master}]);
    foreach my $area (sort keys %{$conf->{areas}}) {
	$resolver->tsig($conf->{areas}->{$area}->{name}, $conf->{areas}->{$area}->{secret});

	my $rrs = $conf->{dns}->{rr};
	foreach my $rr (sort keys %$rrs) {
	    for my $rrtype (qw(A AAAA)) {
		next unless grep { $_ eq $rrtype } @{$rrs->{$rr}}; # check if this RR is set up for this type
		my $q = $resolver->query($rr, $rrtype);
		if (! $q) {
		    notice ("$area: $rr $rrtype lookup failed: " . $resolver->errorstring);
		    next;
		}
		my $ipkey = ($rrtype eq 'A') ? 'ip' : 'ip6';
		foreach my $ans ($q->answer) {
		    die "$area: $rr rrtype mismatch $rrtype != " . $ans->type
			unless ($rrtype eq $ans->type);
		    my $ip = $ans->rdatastr;
		    my $srv = $ptr->{$ip};
		    if ($srv) {
			logger "DNS $area: $rr $rrtype $ip ($srv)"
			    if ($conf->{verbose});
			$network->{$srv}->{is_rotated}->{$area} = 1;
		    } else {
			notice ("$area: $rr $rrtype $ip does not belong to any server, deleting");
			my $update = new Net::DNS::Update($conf->{dns}->{domain});
			$update->push(update => rr_del("$rr $rrtype $ip"));
			$resolver->send($update); # ignore errors here
		    }
		}
	    }
	}

	# now re-rotate all rotated servers to make sure the server is in all
	# configured RRs with all IP addresses
	# (this could be done smarter, but it works for now)
	foreach my $srv (sort keys %$network) {
	    next unless $network->{$srv}->{is_rotated}->{$area};
	    rotation ('add', $area, $srv);
	}
    }
}

# rotation (add/del <area> <server.oftc.net>)
sub rotation ($$$)
{
    my ($op, $area, $new_server) = @_;
    unless (exists $dnsarea->{$area}) {
	logger "Area $area does not exist";
	return;
    }
    unless (exists $network->{$new_server}) {
	logger "Server $new_server does not exist";
	return;
    }

    $resolver->tsig($conf->{areas}->{$area}->{name}, $conf->{areas}->{$area}->{secret});

    my $rrs = $conf->{dns}->{rr};
    my $ttl = $conf->{dns}->{ttl};
    my $update = new Net::DNS::Update($conf->{dns}->{domain});
    foreach my $rr (sort keys %$rrs) {
	my $with_a = grep { $_ eq 'A' } @{$rrs->{$rr}}; # this RR is set up for A
	my $with_aaaa = grep { $_ eq 'AAAA' } @{$rrs->{$rr}};
	if ($op eq 'add') {
	    if ($network->{$new_server}->{A} and $with_a) {
		logger "Adding $area $new_server: $rr $ttl A $network->{$new_server}->{A}";
		$update->push(update => rr_add("$rr $ttl A $network->{$new_server}->{A}"));
	    }
	    if ($network->{$new_server}->{AAAA} and $with_aaaa) {
		logger "Adding $area $new_server: $rr $ttl AAAA $network->{$new_server}->{AAAA}";
		$update->push(update => rr_add("$rr $ttl AAAA $network->{$new_server}->{AAAA}"))
	    }
	} else {
	    if ($network->{$new_server}->{A} and $with_a) {
		logger "Deleting $area $new_server: $rr A $network->{$new_server}->{A}";
		$update->push(update => rr_del("$rr A $network->{$new_server}->{A}"));
	    }
	    if ($network->{$new_server}->{AAAA} and $with_aaaa) {
		logger "Deleting $area $new_server: $rr AAAA $network->{$new_server}->{AAAA}";
		$update->push(update => rr_del("$rr AAAA $network->{$new_server}->{AAAA}"))
	    }
	}
    }
    my $reply = $resolver->send($update);
    if ($reply) {
	if ($reply->header->rcode eq 'NOERROR') {
	    logger "$area update succeeded";
	    $network->{$new_server}->{is_rotated}->{$area} = ($op eq 'add');
	} else {
	    notice ("$area update failed: " . $reply->header->rcode . "\n");
	}
    } else {
	notice ("$area update failed: " . $resolver->errorstring . "\n");
    }
}

# After checking we are seeing enough hubs to assume we are not in a big
# netsplit, derotate all servers that are marked disconnected in the map we
# just saw
sub derotate_disconnected ()
{
    my $hubs = grep { $network->{$_}->{connected} and $network->{$_}->{hub} }
	(keys %$network);
    if ($hubs < $conf->{thresholds}->{min_hubs}) {
	logger "I'm seeing only $hubs hubs, $conf->{thresholds}->{min_hubs} required. Won't do anything until seeing a better map";
	$have_map = 0;
	return;
    }

    my @servers = keys %$network;
    my $servers = @servers;
    my $disconnected_servers = grep { not $network->{$_}->{connected} } @servers;
    if ($disconnected_servers > $servers * $conf->{thresholds}->{servers_percentage}) {
	notice ("Too many servers are disconnected ($disconnected_servers out of $servers), won't derotate any until seeing a better map");
	$have_map = 0;
	return;
    }

    my @bad_servers = grep { not $network->{$_}->{connected} or not $network->{$_}->{rotate} } @servers;
    foreach my $srv (@bad_servers) {
	my $reason = $network->{$srv}->{connected} ?
	    'not set up for rotation' : 'disconnected';

	foreach my $area (sort keys %{$conf->{areas}}) {
	    next unless ($network->{$srv}->{is_rotated}->{$area});
	    rotation ('del', $area, $srv);
	    my @servers = sort { $network->{$b}->{clients} <=> $network->{$a}->{clients} }
		@{$areas->{$area}};
	    notice ("$area: $srv is $reason, derotating: " .
		format_servers ($area, \@servers, $srv));
	}
    }
}

sub format_servers ($$;$)
{
    my ($area, $servers, $hilight) = @_;
    my $f = '';
    foreach my $srv (@$servers) {
	my $c = "";
	if (grep { $_ eq $srv } @{$dnsarea->{$area}}) {
	    if (!$network->{$srv}->{connected}) {
		$c = "5"; # red
	    } elsif ($network->{$srv}->{is_rotated}->{$area}) {
		$c = "3"; # green
	    } else {
		$c = "7"; # yellow
	    }
	} else {
	    $c = "6"; # purple
	}
	my $b = ($hilight and $hilight eq $srv) ? "" : "";
	$f .= "$b$c$srv:$network->{$srv}->{clients}$b ";
    }
    $f =~ s/\.$conf->{dns}->{serverdomain}//g; # short hostnames in output
    return $f;
}

# If we saw the network map, balance server load.
#
# For each area, we sort the list of servers in that area by client count. We
# then determine the client count of the median ("middle") node. We rotate all
# servers that have this many clients (plus the "rotate" offset) or less, and
# derotate that have more than this many clients (plus the "derotate" offset).
#
# A server can be rotated in one area and derotated in another at the same
# time.
sub balance ()
{
    return unless ($have_map);

    foreach my $area (sort keys %{$conf->{areas}}) {
	my @connected_servers = grep { $network->{$_}->{connected} } @{$dnsarea->{$area}};
	if (@connected_servers == 0) {
	    logger "No servers in area $area, won't touch it";
	    next;
	}
	my @srv = sort { $network->{$b}->{clients} <=> $network->{$a}->{clients} }
	    @connected_servers;
	my @area_srv = sort { $network->{$b}->{clients} <=> $network->{$a}->{clients} } @{$areas->{$area}};
	my $nsrv = @srv;
	my $median = $srv[$nsrv / 2];
	my $median_clients = $network->{$median}->{clients};
	logger "$area: " . format_servers($area, \@area_srv)
	    if ($conf->{verbose});
	my $derotate_threshold = $median_clients + $conf->{thresholds}->{derotate};
	my $rotate_threshold = $median_clients + $conf->{thresholds}->{rotate};

	foreach my $srv (@connected_servers) {
	    warn "dnsarea->{$area} contains $srv, but it isn't configured for rotation" unless ($network->{$srv}->{rotate});

	    my $is_rotated = $network->{$srv}->{is_rotated}->{$area};
	    my $clients = $network->{$srv}->{clients};
	    if ($is_rotated) {
		if ($clients > $derotate_threshold) {
		    rotation ('del', $area, $srv);
		    notice ("$area: $srv has $clients clients, derotating: " . format_servers($area, \@area_srv, $srv));
		}
	    } else {
		if ($clients <= $rotate_threshold) {
		    rotation ('add', $area, $srv);
		    notice ("$area: $srv has $clients clients, rotating: " . format_servers($area, \@area_srv, $srv));
		}
	    }
	}
    }
}

# main loop

load_conf();
# postpone dns_fixup() until we have an IRC connection

my $irc = POE::Component::IRC::State->spawn() or die "Oh noooo! $!";

POE::Session->create(
    inline_states => {
	_start           => \&on_start,
	irc_disconnected => \&on_disconnect,
	irc_001          => \&on_connect,
	irc_381          => \&on_oper,
	irc_public       => \&on_msg,
	irc_msg          => \&on_msg,
	irc_snotice      => \&on_snote,
	irc_015          => \&on_map,
	irc_016          => \&on_map, # looks unused
	irc_017          => \&on_map_end,
	irc_ping         => \&on_ping,
	irc_pong         => \&on_ping,
	watchdog         => \&on_watchdog,
	on_sighup           => \&on_sighup,
    },
);

$poe_kernel->run();

# callbacks

sub on_start
{
    my ($kernel, $session) = @_[KERNEL, SESSION];
    $irc->yield(register => "all");
    $kernel->sig(HUP => 'on_sighup');
    $kernel->sig(SIGUSR1 => 'on_sighup');
    do_connect(@_);
}

sub do_connect
{
    logger "Connecting to $conf->{irc}->{Server}:$conf->{irc}->{Port}";
    $irc->yield(connect => $conf->{irc});
}

sub on_connect
{
    my ($kernel, $session) = @_[KERNEL, SESSION];
    logger "Connected, joining $conf->{channel} and opering up";
    $irc->yield(oper => $conf->{oper}->{name} => $conf->{oper}->{pass});
    $irc->yield(join => $conf->{channel});
    set_watchdog($kernel);
}

sub set_watchdog
{
    my ($kernel) = @_;
    $kernel->alarm(watchdog => time + $conf->{timeouts}->{ping});
}

sub on_disconnect
{
    logger "Disconnected, restarting myself";
    exec $0, @ARGV;
    die "Couldn't reexec myself: $!";
}

sub get_map
{
    $have_map = 0; # stop operating until we have the map
    $irc->yield(quote => 'MAP');
}

sub on_oper
{
    my $mode = $conf->{oper}->{mode};
    logger "Opered up, setting mode $mode and asking for network map";
    $irc->yield(mode => $conf->{irc}->{Nick} => $mode);
    dns_fixup(); # clean DNS here so messages reach IRC
    get_map(); # start working
}

sub on_msg
{
    my ($kernel, $from, $where, $msg) = @_[KERNEL, ARG0, ARG1, ARG2];
    chomp $msg;

    logger "<$from> [@$where] $msg" if ($conf->{verbose});

    return unless $msg =~ s/^$conf->{irc}->{Nick}: //;

    if ($msg =~ /^status\b/) {
	unless ($have_map) {
	    notice ("I don't have a good network map!");
	}

	foreach my $area (sort keys %{$conf->{areas}}) {
	    my @servers = sort { $network->{$b}->{clients} <=> $network->{$a}->{clients} }
		@{$areas->{$area}};
	    notice ("$area: " . format_servers($area, \@servers));
	}

#    } elsif ($msg =~ /^map\b/) {
#	get_map();
    } elsif ($msg =~ /^reload\b/) {
	notice ("Reloading conf");
	load_conf();
	dns_fixup();
	get_map();
#    } elsif ($msg =~ /^rotate (\S+) (\S+)/) {
#	rotation ('add', $1, $2);
#    } elsif ($msg =~ /^derotate (\S+) (\S+)/) {
#	rotation ('del', $1, $2);
    }
}

sub on_snote
{
    my ($kernel, $msg, $target, $from) = @_[KERNEL, ARG0, ARG1, ARG2];
    $ping_stamp = time;

    if ($msg =~ /^Client connecting:/) {
	$network->{$from}->{clients}++;
	logger "$from client count is now $network->{$from}->{clients}"
	    if ($conf->{verbose});
	balance();
    } elsif ($msg =~ /^Client exiting:/) {
	$network->{$from}->{clients}--;
	logger "$from client count is now $network->{$from}->{clients}"
	    if ($conf->{verbose});
	balance();
    } elsif ($msg =~ /^(\S+) was connected for \d+ seconds./) {
	my $server = $1;
	return unless (exists $network->{$server});
	notice ("$server has split, asking for network map");
	get_map();
    } elsif ($msg =~ /^End of burst from (\S+) /) {
	my $server = $1;
	return unless (exists $network->{$server});
	notice ("$server has connected, asking for network map");
	get_map();
    }
}

sub on_map
{
    my ($kernel, $from, $msg) = @_[KERNEL, ARG0, ARG1];

    # 015 oftc-geodns :     `- reticulum.oftc.net[9CE]                   1 [20.0%] 
    # 015 oftc-geodns :** dibasic.oftc.net (Not Connected) 
    # juped server: |   `- synthon.oftc.net                      0 [ 0.0%]
    if ($msg =~ /\b(\w+.oftc.net)(?:\[\w+\])? +-* (\d+) /) {
	if (not exists $network->{$1}) {
	    logger "Huh, I didn't know $1 yet";
	}
	if ($network->{$1}->{clients} and $network->{$1}->{clients} != $2) {
	    logger "I thought $1 had $network->{$1}->{clients} clients, but there are $2";
	}
	$network->{$1}->{clients} = $2;
	$network->{$1}->{connected} = 1;
    } elsif ($msg =~ / (\w+.oftc.net) \(Not Connected\)/) {
	$network->{$1}->{clients} ||= 0;
	$network->{$1}->{connected} = 0;
    } else {
	logger "Failed to parse MAP data $from: $msg";
    }
}

sub on_map_end
{
    my ($kernel, $from, $msg) = @_[KERNEL, ARG0, ARG1];
    $ping_stamp = time;
    logger "Got map, starting to balance";

    $have_map = 1;
    derotate_disconnected(); # can unset have_map
    balance();
}

sub on_ping
{
    $ping_stamp = time;
    logger "Got ping" if ($conf->{verbose});
}

sub on_watchdog
{
    my ($kernel, $session) = @_[KERNEL, SESSION];
    logger "Watchdog woke up" if ($conf->{verbose});

    my $age = time - $ping_stamp;
    if ($age >= $conf->{timeouts}->{ping}) {
	logger "Haven't seen traffic for ${age}s, sending a ping";
	$irc->yield(ping => $conf->{irc}->{Nick});
    }
    if ($age >= $conf->{timeouts}->{watchdog}) {
	logger "Haven't seen traffic for ${age}s, giving up";
	$irc->yield('disconnect');
	on_disconnect;
    }
    set_watchdog($kernel);
}

sub on_sighup
{
    $_[KERNEL]->sig_handled();
    notice ("Got SIGHUP, reloading conf");
    load_conf;
    dns_fixup();
    get_map;
}

# functions

sub notice ($)
{
    my $msg = shift;
    logger ($msg);
    $irc->yield(notice => $conf->{channel} => $msg) if ($irc and $conf->{channel});
}

sub to_bool ($$)
{
    my ($str, $default) = @_;
    return $default if (not defined $str);
    return 1 if ($str =~ /yes|on/);
    return 0 if ($str =~ /no|off/);
    warn "Undefined boolean value $str";
    return $str;
}

# vim:sw=4:sta
